cryptographic signatures - allow resource server to validate tokens (JWT tokens) 
    a. does not require communication with authentication server 
    b. does not require sharing a database with the authentication server
    
    use sysemtric keys to sign/validate JWT  // simpler but must share key which is not always on option
    JWT - token implemnetation
        a. 3 parts: header.body.signature
        b. header body generated using JSON hten Base64 encoded
        c. signature generated using cryptographis algorithm using header and body
        d. signature also  keeds a key (ie password), which allows someone to sign token or validate signature => unaltered JWT
        
    signed JWT => JWS
    encrypted JWS => JWE
    
    any alteration in header/body breaks signature, but heade/body can be read
    in order to hide header/body contents can also encrypt JWS, 
    signature validity => generated with correct key, match content that was signed
    
    JwtTokenStore - spring implementation of token manager
    
    symmetric key used to sign and validate token (private - don't share outside system)
    asymmetric key pair in which one key is used for signing token and the other for validating the token (public/private)

    // Authorization server
    @Configuration  // manage jwt tokens
    @EnableAuthorizationServer   // instruct spring boot to confugre OAuth2
    public class AuthServerConfig extends AuthorizationServerConfigurerAdapter {
    
        @Value("${jwt.key}")
        private String jwtKey
        
        @Autowired
        private AuthenitcationManager authenticationManager;

        @Override
        public void configure(ClientDetailsServiceConfigurer clients) {
            client.inMemory()...
        }

        @Override
        public configure(AuthorizationServerEndpointsConfigurer endpoints) {
            endpoints
                .authenticationManager(authenticationManager)
                .tokenStore(tokenStore())
                .accessTokenConverter(jwtAccessTokenConverter());
        }

        @Bean
        public TokenStore tokenStore() {
            return new JwtTokenStore(jwtAccessTokenConverter());
        }
        
        @Bean
        public JwtAccessTokenConverter jwtAccessTokenConverter() {
            var converter = new JwtAccessTokenConverter();
            converter.setSigningKey(jwtKey);
            return converter;
        }
    
    
    @Configuration  // validate username/password
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
        @Bean
        public UserDetailsService uds() {...}
        @Bean 
        public PasswordEncoder passwordEncoder() {...}
        @Bean
        public AuthenticationManager authenticationManagerBean() { ... }
        
    application.properties  // in production use a spring vault
        jwt.key= MjWP5L7CiD  // in production use algorithm for randomness, minimum length 258 bytes

    curl -v -XPOST clientId:clinetSecret http://localhost:8080/oauth/token?grant_type=password?username=john&password=12345&scope=read
    response: { "access_token":"a9e8...", "token_type": "bearer", "refresh_token":"89sf...", "expires_in": 43199, "scope": ["read"], "jti": "7774..." }
    
    // Resource Server
    @Configuration
    @EnableResourceServer  // marked deprectated, use configuration methods from spring security
    public class ResourceServerConfig extend ResourceServerConfigurerAdapter {
        @Value("${jwt.key}")
        private String jwtKey

        @Override
        public void configure(ResourceServerConfigurer resources) {
            resources.tokenStore(tokenStore()) 
        }

        @Bean
        public TokenStore tokenStore() {
            return new JwtTokenStore(jwtAccessTokenConverter());
        }

        @Bean
        public JwtAccessTokenConverter jwtAccessTokenConverter() {
            var converter = new JwtAccessTokenConverter();
            converter.setSigningKey(jwtKey);
            return converter;
        }
    }

    application.properties  // in production use a spring vault
        server.port=9090
        jwt.key= MjWP5L7CiD  // in production use algorithm for randomness, minimum length 258 bytes

    curl -H "Authorization:Bearer a9e8..." "http://localhost:9090/hello"
    response: Hello!

    // Resource Server - Spring Security
    @Configuration
    public class ResourceServerConfig extends WebSecurityConfigurerAdapter {
    
        @Value("${jwt.key}")
        private String jwtKey;
    
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests()
                    .anyRequest().authenticated()
                .and()
                    .oauth2ResourceServer(c -> c.jwt( jwt -> {  // new way will use customizer object as parameter to oauth2ResourceServer()
                        jwt.decoder(jwtDecoder());
                    }));
        }
    
        @Bean
        public JwtDecoder jwtDecoder() {
            byte [] key = jwtKey.getBytes();
            SecretKey originalKey = new SecretKeySpec(key, 0, key.length, "AES");
    
            NimbusJwtDecoder jwtDecoder =
                    NimbusJwtDecoder.withSecretKey(originalKey)
                    .build();
    
            return jwtDecoder;
        }
    }

asymmetric keys
        private key - used only to sign tokens (authorization server)
    public key - validate signed token that were signed by the private key (resource server)
    
    generate key pairs using "keytool" (part of open jdk) and "OpenSSL" (used by keytool to generate public key) 
    => download OpenSSL from https:/www.openssl.org or get as part of Git Bash which comes with OpenSSL  
    => Git Bash comes with "git for windows", permits unix commands
        1. generate private key
        2. generate public key for that private key
        
        keytool -genkeypair -alias ssia -keyalg RSA -keypass ssia123 -keystore ssia.jks -storepass ssia123
            alias - names private key
            storepass - to protect private key
            => private key generated in -keystore file parameter "ssia.jks" // java key store file, in current directory
            => must answer prompts: first/last name, org. unit, org., city, state abbrev, country code
            
        // generate public key (run form git bash)
        keytool -list -rfc --keystore ssia.jks | openssl x509 -inform pem -pubkey
        => prompted to enter password (eg. ssia123)
        => public key and certificate dumped to screen
           => cut/paste public key into application.properties property "publicKey", or as file ("ssia.pub_key") and use via ClassPathResource()
           => "-----BEGIN PUBLIC KEY-----" to "-----END PUBLIC KEY-----" inclusive
    
    // authorization server
    store ssia.jks file in resources
    add to application.properties  / to config JwtTokenStore
        privateKey=ssia.jks
        password=ssia123
        alias=ssia
        
    @Configuration  // manage jwt tokens
    @EnableAuthorizationServer   // instruct spring boot to confugre OAuth2
    public class AuthServerConfig extends AuthorizationServerConfigurerAdapter {

        @Value("${privateKey}")
        private String privateKey;
        
        @Value("${password}")
        private String password;

        @Value("${alias}")
        private String alias;

        <same as before>
        
        @Bean
        public JwtAccessTokenConverter jwtAccessTokenConverter() {
            var converter = new JwtAccessTokenConverter();
        
            KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource(privateKey), password.toCharArray());
            converter.setKeyPair(keyStoreKeyFactory.getKeyPair(alias));
            return converter;
        }

    curl -v -XPOST clientId:clinetSecret http://localhost:8080/oauth/token?grant_type=password?username=john&password=12345&scope=read
    response: { "access_token":"a9e8...", "token_type": "bearer", "refresh_token":"89sf...", "expires_in": 43199, 
                "scope": ["read"], "jti": "7774..." }
    
    // resource server
    @Configuration
    @EnableResourceServer  // marked deprectated, use configuration methods from spring security
    public class ResourceServerConfig extend ResourceServerConfigurerAdapter {
        @Value("${publicKey}")
        private String publicKey

        @Override
        public void configure(ResourceServerConfigurer resources) {
            resources.tokenStore(tokenStore()) 
        }

        @Bean
        public TokenStore tokenStore() {
            return new JwtTokenStore(jwtAccessTokenConverter());
        }

        @Bean
        public JwtAccessTokenConverter jwtAccessTokenConverter() {
            var converter = new JwtAccessTokenConverter();
            converter.setVerifierKey(publicKey);
            return converter;
        }
    }

    application.properties  // in production use a spring vault
        server.port=9090
        publicKey=-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----  // from keytool public key screen dump

    curl -H "Authorization:Bearer a9e8..." "http://localhost:9090/hello"
    response: Hello!
    
    // resource server - Spring Security
    @Configuration
    public class ResourceServerConfig extends WebSecurityConfigurerAdapter {
    
        @Value("${publicKey}")
        private String publicKey;
    
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.oauth2ResourceServer(
                    c -> c.jwt(
                            j -> j.decoder(jwtDecoder())
                    )
            );
    
            http.authorizeRequests()
                    .anyRequest().authenticated();
        }
    
        @Bean
        public JwtDecoder jwtDecoder() {
            try {
                KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                var key = Base64.getDecoder().decode(publicKey);
    
                var x509 = new X509EncodedKeySpec(key);
                var rsaKey = (RSAPublicKey) keyFactory.generatePublic(x509);
                return NimbusJwtDecoder.withPublicKey(rsaKey).build();
            } catch (Exception e) {
                throw new RuntimeException("Wrong public key");
            }
        }
    }

Alternative asymmetric key configuration
    Since it is desired to change the key pair values periodically (key rotation),  
    => easier if the pair reside on just the authorization server,
    => instead of the private key on the authorization server and the public key on the resource server
    => then expose endpoint on authorization server so resource server can register as a lcient and retrieve the public key
    
    such an enpoint already exists in spring (oauth/token_key) but by default all requests are denied
    
    // Enable authorization server endpoint (token_key)
    @Configuration
    @EnableAuthorizationServer
    public class AuthServerConfig extends AuthorizationServerConfigurerAdapter {
        ...
        @Override
        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
            clients.inMemory().withClient("client")....
                .and()                                      // register resource server as client
                    .withClient("resourceserver")
                    .secret("resourceserversecret");
        }

        @Override  // configure auth server to expose endpoint for valid clients
        public void configure(AuthorizationServerSecurityConfigurer security) {
            security.tokenKeyAccess("isAuthenticated()");
        }

    curl -u resourceserver/resourcesecret http://localhost:8080/oauth/token_key
    response {"alg":""SHA256withRSA", "value": "-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----" }

    // Enable resource server to access endpoint (token_key)
    application.properties
        server.port=9090
        security.oauth2.resource.jwt.key-uri=http://localhost:8080/oauth/token_key
        security.oauth2.client.client-id=resourceserver
        security.oauth2.client.client-secret=resourcesecret
        
        // now public key gotten from auth server, can skip setting in resource server config
        @Configuration
        @EnableResourceServer
        public class ResourceServerConfig extends ResourceServerConfigurerAdapter {}
        
    curl -H "Authorization:Bearer a9e8..." "http://localhost:9090/hello"
    response: Hello!

// Enhancing details in JWT token
    default details in token - all details necessary for Basic Authentication
        "exp": "<timestamp when toke expires>",
        "user_name": "<authenticated user>",
        "authorities": "<permissions granted to user>",
        "jti": "<unique id of token">,
        "client_id": "<client that requested token">,
        "scope": "<client permissions>"
        
    // Authorization server
    1. create a CustomTokenEnhancer class
        public class CustomTokenEnhancer implements TokenEnhancer {
            @Override
            public OAuth2AccessToken enhance(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication) {
                var token = new DefaultOAuth2AccessToken(oAuth2AccessToken);

                Map<String, Object> info = Map.of("generatedInZone", ZoneId.systemDefault().toString());  // create map of custom detail
                token.setAdditionalInformation(info);

                return token;
            }
        }

    2. add and instance of it to the TokenEnhancerChain in configuration 
       => since JwtAccessTokenConverter is also an enhancer, must re-create chain
       
       @Configuration
       @EnableAuthorizationServer
       public class AuthServerConfig extends AuthorizationServerConfigurerAdapter {
           ...
           @Override
           public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
               TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
       
               var tokenEnhancers = List.of(new CustomTokenEnhancer(),jwtAccessTokenConverter());
       
               tokenEnhancerChain.setTokenEnhancers(tokenEnhancers);
       
               endpoints
                 .authenticationManager(authenticationManager)
                 .tokenStore(tokenStore())
                 .tokenEnhancer(tokenEnhancerChain);
           }
       
           @Bean
           public TokenStore tokenStore() {...}
       
           @Bean
           public JwtAccessTokenConverter jwtAccessTokenConverter() {...}
       }

        curl -v -XPOST clientId:clinetSecret http://localhost:8080/oauth/token?grant_type=password?username=john&password=12345&scope=read
        response: { "access_token":"a9e8...", "token_type": "bearer", "refresh_token":"89sf...", "expires_in": 43199, 
                    "scope": ["read"], "jti": "7774...", "generatedInZone". "Europe/Bucharest" }

        JWT body: {"exp": 15854562456, "user_name": "john", "authorities": ["read"], "jti": "0c39...", 
                   "client_id": "clientId", "scope": ["read"], "generatedInZone". "Europe/Bucharest"}

        NOTE: while custom detail is in both response body and jwt body, jwt signature validates value not changed in transit

    // Resource server - read custom details
       * AccessTokenConverter is object the convert token to an Authentication (eg. JwtAccessTokenConverter)
         => need to change to accomodate custom details in JWT
       
       1. create a CustomJwtAccessTokenConverter class
       public class CustomJwtAccessTokenConverter extends JwtAccessTokenConverter {
           @Override
           public OAuth2Authentication extractAuthentication(Map<String, ?> map) {
               var authentication = super.extractAuthentication(map);  // get initial authentication object, apply JwtAccessTokenConverter logic
               authentication.setDetails(map);  // add custom details to authentication
               return authentication;
           }
       }

        2. use CustomJwtAccessTokenConverter in configuration as JwtAccessTokenConverter
        @Configuration
        @EnableResourceServer
        public class ResourceServerConfig extends ResourceServerConfigurerAdapter {
            ...
            @Bean
            public JwtAccessTokenConverter jwtAccessTokenConverter() {
                var converter = new AdditionalClaimsAccessTokenConverter();
                converter.setVerifierKey(publicKey);
                return converter;
            }
        }
    
        @RestController
        public class HelloController {
            @GetMapping("/hello")
            public String hello(OAuth2Authentication authentication) {
                OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();
                Map<String, Object> customDetails = details.getDecodedDetails();
                return "Hello! " + (String) customDetails.get("generatedInZone");
            }

        curl -H "Authorization:Bearer a9e8..." "http://localhost:9090/hello"
        response: Hello! Europe/Bucharest
